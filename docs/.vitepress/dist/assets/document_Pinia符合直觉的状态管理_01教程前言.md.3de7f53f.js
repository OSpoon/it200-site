import{_ as t,o,c as e,X as a}from"./chunks/framework.7a10e803.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"document/Pinia符合直觉的状态管理/01教程前言.md","filePath":"document/Pinia符合直觉的状态管理/01教程前言.md","lastUpdated":1692946053000}'),r={name:"document/Pinia符合直觉的状态管理/01教程前言.md"},n=a('<h2 id="全局状态管理" tabindex="-1">全局状态管理 <a class="header-anchor" href="#全局状态管理" aria-label="Permalink to &quot;全局状态管理&quot;">​</a></h2><p>使用 <strong>Vuejs</strong> 内置的 <strong>API</strong> 仅能实现组件间纵向的数据（状态）传递，如何实现横向组件间数据（状态）传递就需要引入全局的、集中式的状态管理。状态管理的应用是应用程序横向跨组件实现数据（状态）传递的有效手段。</p><h2 id="pinia-简介" tabindex="-1">Pinia 简介 <a class="header-anchor" href="#pinia-简介" aria-label="Permalink to &quot;Pinia 简介&quot;">​</a></h2><p><strong>Pinia</strong> 是在为 <strong>Vuex</strong> 进行下一版本探索实验中对其取而代之的状态管理库，<strong>Pinia</strong> 拥有一组组合式API 且除安装和 <strong>SSR</strong> 之外的部分，其余 API 均支持在 <strong>Vue2</strong> 和 <strong>Vue3</strong> 中使用。</p><h2 id="pinia-特点" tabindex="-1">Pinia 特点 <a class="header-anchor" href="#pinia-特点" aria-label="Permalink to &quot;Pinia 特点&quot;">​</a></h2><ol><li><p>所见即所得：与组件类似的 Store。其 API 的设计旨在让你编写出更易组织的 store。</p></li><li><p>类型安全：支持类型推断，且在 JavaScript 中实现自动补全。</p></li><li><p>开发工具支持：支持 vue devtools 调试工具。</p></li><li><p>可扩展性：可以通过扩展实现同步本地存储等更多想法。</p></li><li><p>模块化设计：可构建多个 Store 并允许你的打包工具自动拆分它们。</p></li><li><p>极致轻量化：<strong>Pinia</strong> 仅占用 <strong>1kb</strong> 左右的磁盘空间。</p></li></ol><h2 id="认识-store" tabindex="-1">认识 Store <a class="header-anchor" href="#认识-store" aria-label="Permalink to &quot;认识 Store&quot;">​</a></h2><p><strong>Store</strong> 是承载<strong>全局</strong>状态的实体，可以理解为与根组件 APP 同级的状态组件，<strong>Store</strong> 包含了 <code>state</code>、<code>getter</code> 和 <code>action</code> 三大概念，可以简单的理解为普通组件中的 <code>data</code>、<code>computed</code> 和 <code>methods</code>。</p>',8),i=[n];function s(d,c,l,p,_,g){return o(),e("div",null,i)}const u=t(r,[["render",s]]);export{P as __pageData,u as default};
