import{_ as t,o,c as s,X as r}from"./chunks/framework.7a10e803.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"document/Vuejs装饰器风格开发教程/01教程前言.md","filePath":"document/Vuejs装饰器风格开发教程/01教程前言.md","lastUpdated":1692946053000}'),n={name:"document/Vuejs装饰器风格开发教程/01教程前言.md"},g=r('<p><strong>AOP</strong> 切面编程是面向对象开发中的一种经典的编程范式，旨在将横切关注点与核心业务逻辑分离来提高代码的模块性和可维护性。如：日志记录、事务管理等就属于横切关注点。在为 <strong>H5</strong> 提供 <strong>Android</strong> 原生支持时，曾将插件模块改造为 <strong>AOP</strong> 模式，实现插件的自动注册。<strong>Java</strong> 领域的 <strong>SpringBoot</strong> 就是典型的切面编程引领者。</p><p><strong>Vuejs</strong> 的开发风格其实是多样的，按 <strong>API</strong> 可分为：<strong>options api</strong> 和 <strong>composition api</strong>，按 <strong>UI</strong> 开发可分为：<strong>template</strong> 、<strong>jsx/tsx</strong>，渲染函数。除此之外 <strong>Vuejs</strong> 还提供了各种语法糖，就比如说为 <strong>setup()</strong> 函数提供了 <strong>setup</strong> 语法糖。</p><p>在 <strong>Vuejs</strong> 开发者中有一小众的人群就习惯使用装饰器风格做开发，也就是 <strong>AOP</strong> 切面编程模式，主要利用的 <strong>ECMAScript</strong> 提供了 <strong>class</strong> 和 仍处在 实验阶段的 <strong>decorator</strong>，目前 <strong>Vuejs</strong> 社区不再建议在 Vue 3 中使用基于类的组件，仍想使用类组件推荐使用 <a href="https://github.com/facing-dev/vue-facing-decorator" target="_blank" rel="noreferrer">vue-facing-decorator</a>。</p><p>如果你是从 <strong>Java</strong> （后端、安卓）转向的 <strong>Vuejs</strong> 还是 <strong>Angular</strong> （前端）转向的 <strong>Vuejs</strong>，对于已经习惯 <strong>AOP</strong> 切面编程的小伙伴来说，还是可以尝试这种装饰器风格的开发的。对于觉得 “本末倒置的” 的小伙伴我想说：存在即合理。</p>',4),e=[g];function a(_,c,p,i,d,u){return o(),s("div",null,e)}const f=t(n,[["render",a]]);export{m as __pageData,f as default};
