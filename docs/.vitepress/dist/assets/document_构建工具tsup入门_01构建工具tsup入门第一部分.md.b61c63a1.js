import{_ as s,o as a,c as n,X as l}from"./chunks/framework.7a10e803.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"document/构建工具tsup入门/01构建工具tsup入门第一部分.md","filePath":"document/构建工具tsup入门/01构建工具tsup入门第一部分.md","lastUpdated":1692946053000}'),p={name:"document/构建工具tsup入门/01构建工具tsup入门第一部分.md"},o=l(`<blockquote><p>tsup 是一个基于 ESBuild 实现在零配置的情况下快速捆绑 Typescript 模块的项目，在构建 CLI类 项目时可以优先考虑采用。</p></blockquote><p><img src="https://picgo-2022.oss-cn-beijing.aliyuncs.com/202308101429193.png" alt="完整大纲"></p><p>在这一节中你将了解简单上手案例、配置文件的使用以及多入口如何配置等内容，准别好我们就要开始学习 tsup 了。</p><h2 id="_1-介绍-tsup" tabindex="-1">1. 介绍 tsup： <a class="header-anchor" href="#_1-介绍-tsup" aria-label="Permalink to &quot;1. 介绍 tsup：&quot;">​</a></h2><p>tsup 是一个基于 ESBuild 实现在零配置的情况下快速捆绑 Typescript 模块的项目，支持 Node.js 应用中的任何内容，如：.js、.json、.mjs，及 Typescript 中的 .ts、.tsx，还包括实验性的CSS。但在由于部分功能 esbuild 存在天然的不足，但又是开发者密切关注的功能，tsup 同时也选择融合其他的构建工具共同参与，这些内容会在后续的小节说明。</p><h2 id="_2-简单使用" tabindex="-1">2. 简单使用： <a class="header-anchor" href="#_2-简单使用" aria-label="Permalink to &quot;2. 简单使用：&quot;">​</a></h2><p>通过一个简单的示例来演示 tsup 零配置编译代码的快捷性；</p><h3 id="_2-1-准备案例代码" tabindex="-1">2.1 准备案例代码 <a class="header-anchor" href="#_2-1-准备案例代码" aria-label="Permalink to &quot;2.1 准备案例代码&quot;">​</a></h3><p>这里使用 esbuild 文档中的一块案例源码：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> Server </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-dom/server</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> Greet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> &lt;</span><span style="color:#FFCB6B;">h1</span><span style="color:#A6ACCD;">&gt;Hello</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> world</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renderToString</span><span style="color:#A6ACCD;">(&lt;</span><span style="color:#FFCB6B;">Greet</span><span style="color:#A6ACCD;"> /&gt;))</span></span></code></pre></div><h3 id="_2-2-安装必要的依赖项" tabindex="-1">2.2 安装必要的依赖项： <a class="header-anchor" href="#_2-2-安装必要的依赖项" aria-label="Permalink to &quot;2.2 安装必要的依赖项：&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">react</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">react-dom</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@types/react</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@types/react-dom</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span></code></pre></div><h3 id="_2-3-运行-tsup-编译" tabindex="-1">2.3 运行 tsup 编译： <a class="header-anchor" href="#_2-3-运行-tsup-编译" aria-label="Permalink to &quot;2.3 运行 tsup 编译：&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code01</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.tsx</span></span></code></pre></div><p>仅仅需要在 tsup 命令后紧跟需要编译的文件名即可启动编译，默认输出到当前目录下的 dist 文件夹中，在此次编译结束后通过 <code>node dist/index.js</code> 执行输出的文件可以正常在终端看到 <code>&lt;h1&gt;Hello, world!&lt;/h1&gt;</code> 内容。</p><p>PS：代码参照<a href="https://1024code.com/codecubes/444X3Zq" target="_blank" rel="noreferrer">1024Code</a>中的code01部分；</p><h2 id="_3-使用配置文件" tabindex="-1">3. 使用配置文件： <a class="header-anchor" href="#_3-使用配置文件" aria-label="Permalink to &quot;3. 使用配置文件：&quot;">​</a></h2><p>虽说 tsup 宣传零配置下工作，但是在实际的项目开发中还是需要使用配置文件进行更细粒度的定制，tsup 支持在 <code>package.json</code> 中增加 tsup 相关属性进行配置，也提供独立配置文件的方式进行配置，一起来看一下吧。</p><h3 id="_3-1-使用配置文件进行配置" tabindex="-1">3.1 使用配置文件进行配置： <a class="header-anchor" href="#_3-1-使用配置文件进行配置" aria-label="Permalink to &quot;3.1 使用配置文件进行配置：&quot;">​</a></h3><ul><li>配置文件命名格式：<code>tsup.config[.js、.ts、.cjs、.json]</code>；</li></ul><p>下面尝试使用 <code>.ts</code> 后缀的配置文件，在下面的配置文件中指定了编译模块的入口、开启生成源码映射文件和开启编译清理选项：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tsup</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.tsx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sourcemap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">clean</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>配置好后运行下面的编译命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code02</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsup</span></span></code></pre></div><p>这次运行 tsup 命令编译就没有紧跟需要编译的文件名了，在编译结束后再次运行 <code>node dist/index.js</code> 仍然可以在终端看到输出了 <code>&lt;h1&gt;Hello, world!&lt;/h1&gt;</code> 内容。</p><p>PS：代码参照<a href="https://1024code.com/codecubes/444X3Zq" target="_blank" rel="noreferrer">1024Code</a>中的code02部分，需要安装 tsup 模块：<code>npm i tsup -D</code>；</p><h3 id="_3-2-使用配置文件-终端命令动态配置" tabindex="-1">3.2 使用配置文件 + 终端命令动态配置： <a class="header-anchor" href="#_3-2-使用配置文件-终端命令动态配置" aria-label="Permalink to &quot;3.2 使用配置文件 + 终端命令动态配置：&quot;">​</a></h3><p>仅使用配置文件仍旧是相对古板的，尤其是 <code>json</code> 格式的配置文件，但是在 <code>js</code> 或 <code>ts</code> 格式的配置文件中可以通过传入不同的选项动态调整配置，不同的选项通过终端指定参数控制，这样就达到动态控制少部分配置，静态控制大部分配置的目的；</p><p>将上面的配置进行改造，通过函数的方式返回一个配置对象，其它地方均不变：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tsup</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    entry</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    sourcemap</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sourcemap</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    clean</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>这次运行 tsup 编译稍有变化，需要指定是否开启 sourcemap 选项，未开启时将仅输出 <code>.js</code> 文件，开启后将同时输出一个新的 <code>.js.map</code> 文件：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code02</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 关闭</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsup</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 开启</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--sourcemap</span></span></code></pre></div><h3 id="_3-3-在-package-json-中配置" tabindex="-1">3.3 在 package.json 中配置： <a class="header-anchor" href="#_3-3-在-package-json-中配置" aria-label="Permalink to &quot;3.3 在 package.json 中配置：&quot;">​</a></h3><p>个人不太推荐这种配置方式，对于较大的项目来说，将配置全部放置到 <code>package.json</code> 会造成阅读和维护的困难（相对于单文件配置），下面的案例仅供参考：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">tsup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">entry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">splitting</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sourcemap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">clean</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tsup</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_4-多入口配置" tabindex="-1">4. 多入口配置： <a class="header-anchor" href="#_4-多入口配置" aria-label="Permalink to &quot;4. 多入口配置：&quot;">​</a></h2><p>在了解了 tsup 的配置文件后，补充一下各个构建工具均支持的多入口编译配置的方式，各个构建工具大致相同：</p><ol><li>使用终端命令执行时通过位置列出每一个入口文件：</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index1.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index2.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span></span></code></pre></div><ol start="2"><li>使用终端命令执行时通过内置的 --entry 标志来指定入口文件：</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--entry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index1.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--entry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index2.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">..</span></span></code></pre></div><ol start="3"><li>使用配置文件标记所有入口，支持对象和数组两种模式：</li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 数组模式</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index1.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index2.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对象模式</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">m1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index1.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">m2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index2.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这一节的内容就到此结束了，那么你知道 <code>tsup</code> 能干什么了吗？配置文件是不是可以自由利用了？多入口编译在如同组件库分包编译时就会用到，你还能想到 <code>tsup</code> 的什么应用场景呢？</p>`,45),e=[o];function t(c,r,D,y,C,F){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
